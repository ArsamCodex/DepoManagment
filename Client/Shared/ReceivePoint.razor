@page "/ReceivePoint"
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject HttpClient Http
@using DepoManagment.Shared


<EditForm Model="@receiveBox" OnValidSubmit="@HandleValidSubmit1">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-floating mb-3">
        <InputText @bind-Value="receiveBox.BoxBarcode" id="Box Barcode" class="form-control" placeholder="Box Barcode" />
        <label> Box Barcode </label>
    </div>
    <div class="form-floating mb-3">
        <InputDate @bind-Value="receiveBox.IncomeDate" id="date" class="form-control" style="background-color:#F8F8F2; color:black;" placeholder="Income Date" readonly />
        <label style="color:red">Date</label>
    </div>

    <div class="form-floating mb-3">
        
        <InputText @bind-Value="LogedInUser" id="Staff" class="form-control" placeholder="Staff" style="background-color:#F8F8F2; color:black;" readonly />
        <label style="color:red">Staff</label>
    </div>
    <button id="login-submit" type="submit" class="w-100 btn btn-lg btn-warning">Save Data</button>
</EditForm>
<hr>

@if (ReceiveBoxes != null && ReceiveBoxes.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>ReceiveBoxID</th>
                <th>BoxBarcode</th>
                <th>IncomeDate</th>
                <th>Staff</th>
                <th>WhereIsTheBox</th>
                <th>IsBoxFinishedToGoOut</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var box in ReceiveBoxes)
            {
                <tr>
                    <td>@box.ReceiveBoxID</td>
                    <td>@box.BoxBarcode</td>
                    <td>@box.IncomeDate</td>
                    <td>@box.Staff</td>
                    <td>@box.WhereIsTheBox</td>
                    <td>@box.IsBoxFinishedToGoOut</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No receive boxes found.</p>
}

@code {
    public string LogedInUser { get; set; }
    public string LoggedInUserStaffName{ get; set; }
    public int CurrentBoxCount { get; set; }
    public ReceiveBox receiveBox = new ReceiveBox();
    public List<ReceiveBox> ReceiveBoxes = new List<ReceiveBox>();

    protected override async Task OnInitializedAsync()
    {
        // Check if the user is logged in and fetch their information
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;


        if (user.Identity?.IsAuthenticated ?? false)
        {
            // User is authenticated, you can access user ID
            LogedInUser = user.FindFirst(c => c.Type == "sub")?.Value;
            receiveBox.IncomeDate = DateTime.Now;

        }
    }
    public async Task HandleValidSubmit1()
    {


        ReceiveBox rec = new ReceiveBox
            {
                BoxBarcode = receiveBox.BoxBarcode,
                IncomeDate = DateTime.Now,
                Staff = LogedInUser,
                WhereIsTheBox = Department.Start,
                IsBoxFinishedToGoOut = false,
                BoxNumberWhat = CurrentBoxCount++
            };
        await Http.PostAsJsonAsync<ReceiveBox>("api/Receive/ReceiveBoxes", rec);

        ReceiveBoxes = await Http.GetFromJsonAsync<List<ReceiveBox>>("api/Receive/GetAllBoxes");
        receiveBox = new ReceiveBox();
        receiveBox.Staff = LogedInUser;
        receiveBox.IncomeDate = DateTime.Now;
    }

}
